{
  "apiTitle": "ClearVocals API",
  "version": "1.0.0",
  "description": "Complete API schema for ClearVocals Voice Cloning and Audio Processing Platform",
  "baseUrl": "https://your-api-domain.com",
  "authentication": {
    "type": "JWT Bearer Token",
    "header": "Authorization: Bearer <token>",
    "description": "Most endpoints require authentication. Get token from login endpoint."
  },
  "endpoints": {
    "root": {
      "path": "/",
      "method": "GET",
      "description": "API status check",
      "authentication": false,
      "request": {},
      "response": {
        "status": "string",
        "message": "string"
      }
    },
    "auth": {
      "home": {
        "path": "/api/auth/",
        "method": "GET",
        "description": "Auth module home endpoint",
        "authentication": false,
        "request": {},
        "response": {
          "message": "this is auth home"
        }
      },
      "register": {
        "path": "/api/auth/register",
        "method": "POST",
        "description": "User registration with email verification",
        "authentication": false,
        "request": {
          "name": "string (required)",
          "email": "string (required, valid email)",
          "password": "string (required)"
        },
        "response": {
          "message": "User created successfully. Please verify email"
        },
        "errorResponse": {
          "success": false,
          "error": "string",
          "message": "string"
        }
      },
      "verifyEmail": {
        "path": "/api/auth/verify-email",
        "method": "GET",
        "description": "Verify user email with token",
        "authentication": false,
        "request": {
          "token": "string (query parameter, required)"
        },
        "response": {
          "message": "Email verified successfully"
        }
      },
      "login": {
        "path": "/api/auth/login",
        "method": "POST",
        "description": "User login",
        "authentication": false,
        "request": {
          "email": "string (required, valid email)",
          "password": "string (required)"
        },
        "response": {
          "message": "Login successfull",
          "user": {
            "id": "string",
            "name": "string",
            "email": "string",
            "isEmailVerified": "boolean",
            "profilePicture": "string|null",
            "role": "user|admin",
            "credits": "number",
            "subscription": {
              "type": "free|premium|pro",
              "status": "active|trialing|past_due|canceled|none",
              "stripeCustomerId": "string|null",
              "stripeSubscriptionId": "string|null",
              "currentPeriodEnd": "string|null"
            }
          },
          "token": "string",
          "remainingCredits": "number"
        }
      },
      "profile": {
        "path": "/api/auth/profile",
        "method": "GET",
        "description": "Get current user profile",
        "authentication": true,
        "request": {},
        "response": {
          "message": "Profile retrieved successfully",
          "user": {
            "id": "string",
            "name": "string",
            "email": "string",
            "isEmailVerified": "boolean",
            "profilePicture": "string|null",
            "role": "user|admin",
            "credits": "number",
            "subscription": {
              "type": "free|premium|pro",
              "status": "active|trialing|past_due|canceled|none",
              "stripeCustomerId": "string|null",
              "stripeSubscriptionId": "string|null",
              "currentPeriodEnd": "string|null"
            }
          },
          "remainingCredits": "number"
        }
      },
      "updateProfile": {
        "path": "/api/auth/profile",
        "method": "PUT",
        "description": "Update user profile",
        "authentication": true,
        "request": {
          "name": "string (required)"
        },
        "response": {
          "message": "Profile updated successfully",
          "user": {
            "id": "string",
            "name": "string",
            "email": "string",
            "isEmailVerified": "boolean",
            "profilePicture": "string|null",
            "role": "user|admin",
            "credits": "number",
            "subscription": {
              "type": "free|premium|pro",
              "status": "active|trialing|past_due|canceled|none",
              "stripeCustomerId": "string|null",
              "stripeSubscriptionId": "string|null",
              "currentPeriodEnd": "string|null"
            }
          },
          "remainingCredits": "number"
        }
      },
      "forgotPassword": {
        "path": "/api/auth/forgot-password",
        "method": "POST",
        "description": "Request password reset",
        "authentication": false,
        "request": {
          "email": "string (required, valid email)"
        },
        "response": {
          "message": "Password reset email send successfully",
          "details": "Please check your email for reset instructions",
          "email": "string"
        }
      },
      "resetPasswordCheck": {
        "path": "/api/auth/reset-password",
        "method": "GET",
        "description": "Verify reset password token",
        "authentication": false,
        "request": {
          "token": "string (query parameter, required)"
        },
        "response": {
          "message": "Token is valid",
          "email": "string"
        }
      },
      "resetPassword": {
        "path": "/api/auth/reset-password",
        "method": "POST",
        "description": "Reset password with token",
        "authentication": false,
        "request": {
          "token": "string (query parameter, required)",
          "password": "string (required, in request body)"
        },
        "response": {
          "message": "Password reset successful"
        }
      }
    },
    "stripe": {
      "getPricingPlans": {
        "path": "/api/stripe/plans",
        "method": "GET",
        "description": "Get all active pricing plans",
        "authentication": false,
        "request": {},
        "response": {
          "success": true,
          "plans": [
            {
              "_id": "string",
              "name": "string",
              "displayOrder": "number",
              "isActive": "boolean",
              "pricing": "object"
            }
          ],
          "count": "number"
        }
      },
      "createCheckoutSession": {
        "path": "/api/stripe/create-checkout-session",
        "method": "POST",
        "description": "Create Stripe checkout session for payment",
        "authentication": true,
        "request": {
          "price": "number (required, minimum $5)"
        },
        "response": {
          "success": true,
          "sessionId": "string",
          "url": "string (Stripe checkout URL)",
          "credits": "number",
          "price": "number (final price after discount)",
          "discount": "number (discount percentage)"
        }
      },
      "verifyPayment": {
        "path": "/api/stripe/verify-payment/{sessionId}",
        "method": "GET",
        "description": "Verify completed payment and add credits",
        "authentication": true,
        "request": {
          "sessionId": "string (path parameter, required)"
        },
        "response": {
          "success": true,
          "message": "Payment verified and processed successfully",
          "transaction": "string",
          "user": {
            "credits": "number",
            "subscription": {
              "type": "premium",
              "status": "active"
            }
          }
        }
      },
      "getPurchaseHistory": {
        "path": "/api/stripe/purchase-history",
        "method": "GET",
        "description": "Get user's purchase history",
        "authentication": true,
        "request": {},
        "response": {
          "message": "Purchase history retrieved successfully",
          "transactions": [
            {
              "_id": "string",
              "userId": "string",
              "type": "purchase",
              "credits": "number",
              "amount": "number",
              "stripeSessionId": "string",
              "description": "string",
              "status": "success",
              "createdAt": "string (ISO date)"
            }
          ]
        }
      },
      "webhook": {
        "path": "/api/stripe/webhook",
        "method": "POST",
        "description": "Stripe webhook endpoint (internal use)",
        "authentication": false,
        "request": "Raw Stripe webhook payload",
        "response": {
          "received": true
        }
      },
      "customerPortal": {
        "path": "/api/stripe/customer-portal",
        "method": "GET",
        "description": "Get customer portal (Not implemented yet)",
        "authentication": true,
        "status": "NOT_IMPLEMENTED",
        "request": {},
        "response": "Not implemented"
      }
    },
    "videoExport": {
      "exportVideo": {
        "path": "/api/export-video",
        "method": "POST",
        "description": "Start video export job",
        "authentication": false,
        "request": {
          "audioId": "string (required, min length 1)",
          "format": "string (mp4|avi|mov|mkv, default: mp4)",
          "settings": {
            "quality": "low|medium|high|ultra",
            "resolution": "object",
            "otherSettings": "any"
          },
          "timeline": {
            "duration": "number (required)",
            "fps": "number (required)",
            "size": "object (required)",
            "items": "array (required)"
          },
          "editingChanges": "object (required)",
          "voiceCloneData": "object (required)",
          "exportMetadata": "object (required)",
          "instrumentsUrl": "string|null (optional)",
          "subtitlesUrl": "string|null (optional)"
        },
        "response": {
          "jobId": "string",
          "status": "string",
          "message": "Video export started successfully",
          "estimatedDuration": "number|null"
        }
      },
      "getExportStatus": {
        "path": "/api/export-status/{job_id}",
        "method": "GET",
        "description": "Get video export job status",
        "authentication": false,
        "request": {
          "job_id": "string (path parameter, required)"
        },
        "response": {
          "jobId": "string",
          "status": "string",
          "progress": "number",
          "downloadUrl": "string|null",
          "error": "string|null",
          "processingLogs": {
            "logs": ["string"]
          }
        }
      }
    },
    "audioProcessing": {
      "audioSeparation": {
        "path": "/api/audio-separation",
        "method": "POST",
        "description": "Start audio separation job with uploaded audio file (requires upload-file API first)",
        "authentication": true,
        "request": {
          "job_id": "string (required, from /upload-file API)",
          "duration": "number (required, > 0, <= 7200 seconds, max 2 hours)",
          "callerInfo": "string|null (optional, max 255 chars)"
        },
        "response": {
          "success": true,
          "job_id": "string",
          "message": "Processing started successfully",
          "estimatedTime": "5-15 minutes",
          "statusCheckUrl": "string",
          "queuePosition": "number|null"
        },
        "creditCheck": {
          "note": "1 credit per minute of audio",
          "errorResponse": {
            "success": false,
            "message": "Insufficient credits",
            "required_credits": "number",
            "available_credits": "number"
          }
        }
      },
      "getAudioSeparationStatus": {
        "path": "/api/audio-separation-status/{job_id}",
        "method": "GET",
        "description": "Get audio separation job status",
        "authentication": false,
        "request": {
          "job_id": "string (path parameter, required)"
        },
        "response": {
          "job_id": "string",
          "status": "pending|processing|completed|failed|cancelled",
          "progress": "number (0-100)",
          "queuePosition": "number|null",
          "vocalUrl": "string|null (available when completed)",
          "instrumentUrl": "string|null (available when completed)",
          "error": "string|null",
          "createdAt": "string (ISO date)",
          "startedAt": "string|null (ISO date)",
          "completedAt": "string|null (ISO date)",
          "callerInfo": "string|null"
        }
      },
      "voiceCloneSegment": {
        "path": "/api/voice-clone-segment",
        "method": "POST",
        "description": "Clone voice for a single text segment using reference audio",
        "authentication": false,
        "request": {
          "referenceAudioUrl": "string (required, must start with http/https)",
          "referenceText": "string (required, 1-5000 chars, text spoken in reference audio)",
          "text": "string (required, 1-5000 chars, text to synthesize)",
          "speakerLabel": "string|null (optional, max 100 chars)"
        },
        "response": {
          "success": true,
          "message": "Voice cloned successfully",
          "jobId": "string",
          "audioUrl": "string",
          "duration": "number|null (seconds)",
          "error": "string|null"
        }
      }

    },
    "uploads": {
      "uploadFile": {
        "path": "/upload-file",
        "method": "POST",
        "description": "Upload video or audio file for processing",
        "authentication": false,
        "contentType": "multipart/form-data",
        "request": {
          "file": "File (required, video or audio file)"
        },
        "response": {
          "success": true,
          "message": "File uploaded successfully",
          "job_id": "string",
          "status_check_url": "string",
          "original_filename": "string",
          "file_size_mb": "number",
          "estimated_time": "2-10 minutes"
        },
        "allowedFormats": {
          "video": [".mp4", ".avi", ".mov", ".mkv", ".flv", ".wmv", ".webm", ".m4v"],
          "audio": [".mp3", ".wav", ".m4a", ".flac", ".aac", ".ogg"]
        }
      },
      "getUploadStatus": {
        "path": "/upload-status/{job_id}",
        "method": "GET",
        "description": "Get file upload status",
        "authentication": false,
        "request": {
          "job_id": "string (path parameter, required)"
        },
        "response": {
          "job_id": "string",
          "status": "pending|uploading|done|failed",
          "progress": "number (0-100)",
          "message": "string",
          "original_filename": "string|null",
          "file_url": "string|null"
        }
      }
    },
    "videoProcessing": {
      "videoDub": {
        "path": "/api/video-dub",
        "method": "POST",
        "description": "Start video dubbing job (requires uploaded video via upload-file API)",
        "authentication": true,
        "request": {
          "job_id": "string (required, from upload-file API)",
          "target_language": "string (required)",
          "project_title": "string (optional, default: 'Untitled Project')",
          "duration": "number|null (optional, > 0, <= 14400 seconds, max 4 hours)",
          "expected_speaker": "string|null (optional, speaker name or ID)",
          "source_video_language": "string|null (optional, auto-detect if null)",
          "subtitle": "boolean (default: false)",
          "instrument": "boolean (default: false)"
        },
        "response": {
          "success": true,
          "message": "Video dub started successfully",
          "job_id": "string",
          "status_check_url": "string"
        },
        "creditCheck": {
          "note": "Credits required based on video duration",
          "errorResponse": {
            "success": false,
            "message": "Insufficient credits",
            "required_credits": "number",
            "available_credits": "number"
          }
        }
      },
      "getVideoDubStatus": {
        "path": "/api/video-dub-status/{job_id}",
        "method": "GET",
        "description": "Get video dubbing job status",
        "authentication": false,
        "request": {
          "job_id": "string (path parameter, required)"
        },
        "response": {
          "job_id": "string",
          "status": "string",
          "progress": "number (0-100)",
          "message": "string",
          "result_url": "string|null (download URL when completed)",
          "error": "string|null",
          "details": "object"
        }
      },
      "downloadVideo": {
        "path": "/api/download-video",
        "method": "POST",
        "description": "Download video from URL (YouTube, etc.)",
        "authentication": false,
        "request": {
          "url": "string (required, must start with http/https)",
          "quality": "string|null (optional, e.g., 'best', 'worst', 'best[height<=720]')"
        },
        "response": {
          "success": true,
          "message": "string",
          "job_id": "string",
          "video_info": {
            "title": "string",
            "duration": "number",
            "format": "string",
            "other_metadata": "any"
          },
          "cloudflare": "object|null",
          "error": "string|null"
        }
      }
    },
    "userJobs": {
      "getUserSeparations": {
        "path": "/api/jobs/separations",
        "method": "GET",
        "description": "Get paginated audio separation jobs for current user with pagination support",
        "authentication": true,
        "request": {
          "page": "number (query parameter, optional, default: 1, min: 1) - Page number for pagination",
          "limit": "number (query parameter, optional, default: 50, max: 1000) - Number of items per page"
        },
        "response": {
          "success": true,
          "message": "string - Success message with page info",
          "jobs": [
            {
              "job_id": "string - Unique identifier for the separation job",
              "status": "string - Job status: 'pending' | 'processing' | 'completed' | 'failed'",
              "progress": "number (0-100) - Processing progress percentage",
              "audio_url": "string - Original audio file URL for separation",
              "vocal_url": "string|null - Separated vocal audio download URL (available when status is 'completed')",
              "instrument_url": "string|null - Separated instrument audio download URL (available when status is 'completed')",
              "error": "string|null - Error message if job failed",
              "created_at": "string (ISO date) - Job creation timestamp",
              "updated_at": "string (ISO date) - Last update timestamp",
              "completed_at": "string|null (ISO date) - Job completion timestamp"
            }
          ],
          "total": "number - Total number of jobs for the user",
          "page": "number - Current page number",
          "limit": "number - Number of items per page",
          "total_pages": "number - Total number of pages available"
        },
        "errorResponses": {
          "400": "Bad Request - Invalid page parameter (must be > 0)",
          "401": "Unauthorized - User not authenticated or invalid token",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "/api/jobs/separations?page=1&limit=10",
          "response": {
            "success": true,
            "message": "Found 2 separation jobs (page 1)",
            "jobs": [
              {
                "job_id": "sep_123456789",
                "status": "completed",
                "progress": 100,
                "audio_url": "https://storage.example.com/original_audio.mp3",
                "vocal_url": "https://storage.example.com/vocals.wav",
                "instrument_url": "https://storage.example.com/instruments.wav",
                "error": null,
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:33:00Z",
                "completed_at": "2024-01-15T10:33:00Z"
              }
            ],
            "total": 15,
            "page": 1,
            "limit": 10,
            "total_pages": 2
          }
        }
      },
      "getSeparationDetail": {
        "path": "/api/jobs/separation/{job_id}",
        "method": "GET",
        "description": "Get detailed information about a specific audio separation job by job ID",
        "authentication": true,
        "request": {
          "job_id": "string (path parameter, required) - Unique job identifier"
        },
        "response": {
          "success": true,
          "job": {
            "job_id": "string - Unique identifier for the separation job",
            "status": "string - Current job status",
            "progress": "number (0-100) - Processing progress percentage",
            "audio_url": "string - Original audio file URL",
            "vocal_url": "string|null - Separated vocal audio download URL",
            "instrument_url": "string|null - Separated instrument audio download URL",
            "error": "string|null - Error message if job failed",
            "created_at": "string (ISO date) - Job creation timestamp",
            "updated_at": "string (ISO date) - Last update timestamp",
            "completed_at": "string|null (ISO date) - Job completion timestamp"
          },
          "error": "string|null - Error message if operation failed"
        },
        "errorResponses": {
          "403": "Forbidden - Job doesn't belong to current user",
          "404": "Not Found - Job with specified ID not found",
          "401": "Unauthorized - User not authenticated",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "/api/jobs/separation/sep_123456789",
          "response": {
            "success": true,
            "job": {
              "job_id": "sep_123456789",
              "status": "processing",
              "progress": 65,
              "audio_url": "https://storage.example.com/original_audio.mp3",
              "vocal_url": null,
              "instrument_url": null,
              "error": null,
              "created_at": "2024-01-15T10:30:00Z",
              "updated_at": "2024-01-15T10:32:00Z",
              "completed_at": null
            },
            "error": null
          }
        }
      },
      "getUserDubs": {
        "path": "/api/jobs/dubs",
        "method": "GET",
        "description": "Get paginated video dubbing jobs for current user with pagination support",
        "authentication": true,
        "request": {
          "page": "number (query parameter, optional, default: 1, min: 1) - Page number for pagination",
          "limit": "number (query parameter, optional, default: 50, max: 1000) - Number of items per page"
        },
        "response": {
          "success": true,
          "message": "string - Success message with page info",
          "jobs": [
            {
              "job_id": "string - Unique identifier for the dubbing job",
              "status": "string - Job status: 'pending' | 'downloading' | 'separating' | 'transcribing' | 'processing' | 'uploading' | 'completed' | 'failed'",
              "progress": "number (0-100) - Processing progress percentage",
              "original_filename": "string|null - Original uploaded video filename (project title)",
              "target_language": "string - Target language code for dubbing (e.g., 'en', 'bn', 'hi')",
              "source_video_language": "string|null - Source video language code (auto-detected or provided)",
              "expected_speaker": "string|null - Expected speaker name or voice ID for dubbing",
              "subtitle": "boolean - Whether subtitles are included in the output",
              "instrument": "boolean - Whether instrumental track is preserved",
              "result_url": "string|null - Final dubbed video download URL (extracted from details.result_url when completed)",
              "files": [
                {
                  "filename": "string - File name (e.g., 'video_no_subtitles_job123.mp4')",
                  "url": "string - Direct download URL for the file",
                  "size": "number|null - File size in bytes",
                  "type": "string - File category: 'video' | 'audio' | 'subtitle' | 'summary' | 'metadata' | 'other'"
                }
              ],
              "error": "string|null - Error message if job failed",
              "created_at": "string (ISO date) - Job creation timestamp",
              "updated_at": "string (ISO date) - Last update timestamp",
              "completed_at": "string|null (ISO date) - Job completion timestamp"
            }
          ],
          "total": "number - Total number of jobs for the user",
          "page": "number - Current page number",
          "limit": "number - Number of items per page",
          "total_pages": "number - Total number of pages available"
        },
        "errorResponses": {
          "400": "Bad Request - Invalid page parameter (must be > 0)",
          "401": "Unauthorized - User not authenticated or invalid token",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "/api/jobs/dubs?page=1&limit=10",
          "response": {
            "success": true,
            "message": "Found 3 dub jobs (page 1)",
            "jobs": [
              {
                "job_id": "job_20250805_203351_f9537a4f",
                "status": "completed",
                "progress": 100,
                "original_filename": "My Project Title",
                "target_language": "bn",
                "source_video_language": "en",
                "expected_speaker": "John Doe",
                "subtitle": false,
                "instrument": true,
                "result_url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/video_no_subtitles_job_20250805_203351_f9537a4f.mp4",
                "files": [
                  {
                    "filename": "video_no_subtitles_job_20250805_203351_f9537a4f.mp4",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/video_no_subtitles_job_20250805_203351_f9537a4f.mp4",
                    "size": 15240000,
                    "type": "video"
                  },
                  {
                    "filename": "segment_001.wav",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/segment_001.wav",
                    "size": 512000,
                    "type": "audio"
                  },
                  {
                    "filename": "segment_002.wav",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/segment_002.wav",
                    "size": 480000,
                    "type": "audio"
                  },
                  {
                    "filename": "subtitles_job_20250805_203351_f9537a4f.srt",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/subtitles_job_20250805_203351_f9537a4f.srt",
                    "size": 1200,
                    "type": "subtitle"
                  },
                  {
                    "filename": "dubbing_process_summary_job_20250805_203351_f9537a4f.json",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/dubbing_process_summary_job_20250805_203351_f9537a4f.json",
                    "size": 4800,
                    "type": "summary"
                  },
                  {
                    "filename": "segment_001_info.json",
                    "url": "https://pub-1b758b3fa78c4404bb6a60c2a61d6e2a.r2.dev/voice-cloning/2025/08/05/job_20250805_203351_f9537a4f/segment_001_info.json",
                    "size": 350,
                    "type": "metadata"
                  }
                ],
                "error": null,
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:35:00Z",
                "completed_at": "2024-01-15T10:35:00Z"
              }
            ],
            "total": 25,
            "page": 1,
            "limit": 10,
            "total_pages": 3
          }
        }
      },
      "getDubDetail": {
        "path": "/api/jobs/dub/{job_id}",
        "method": "GET",
        "description": "Get detailed information about a specific dubbing job by job ID",
        "authentication": true,
        "request": {
          "job_id": "string (path parameter, required) - Unique job identifier"
        },
        "response": {
          "success": true,
          "job": {
            "job_id": "string - Unique identifier for the dubbing job",
            "status": "string - Current job status",
            "progress": "number (0-100) - Processing progress percentage",
            "original_filename": "string|null - Original uploaded video filename (project title)",
            "target_language": "string - Target language for dubbing",
            "source_video_language": "string|null - Source video language code",
            "expected_speaker": "string|null - Expected speaker name or voice ID",
            "subtitle": "boolean - Whether subtitles are included",
            "instrument": "boolean - Whether instrumental track is preserved",
            "result_url": "string|null - Final dubbed video download URL (from details.result_url)",
            "files": "array|null - Complete list of all generated files with download URLs",
            "error": "string|null - Error message if job failed",
            "created_at": "string (ISO date) - Job creation timestamp",
            "updated_at": "string (ISO date) - Last update timestamp",
            "completed_at": "string|null (ISO date) - Job completion timestamp"
          },
          "error": "string|null - Error message if operation failed"
        },
        "errorResponses": {
          "403": "Forbidden - Job doesn't belong to current user",
          "404": "Not Found - Job with specified ID not found",
          "401": "Unauthorized - User not authenticated",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "/api/jobs/dub/dub_123456789",
          "response": {
            "success": true,
            "job": {
              "job_id": "job_20250805_203351_f9537a4f",
              "status": "processing",
              "progress": 75,
              "original_filename": "My Project Title",
              "target_language": "bn",
              "source_video_language": "en",
              "expected_speaker": "John Doe",
              "subtitle": false,
              "instrument": true,
              "result_url": null,
              "files": null,
              "error": null,
              "created_at": "2024-01-15T10:30:00Z",
              "updated_at": "2024-01-15T10:33:00Z",
              "completed_at": null
            },
            "error": null
          }
        }
      },
      "deleteSeparationJob": {
        "path": "/api/jobs/separation/{job_id}",
        "method": "DELETE",
        "description": "Delete a specific audio separation job permanently from user's account",
        "authentication": true,
        "request": {
          "job_id": "string (path parameter, required) - Unique job identifier to delete"
        },
        "response": {
          "success": true,
          "message": "Separation job deleted successfully",
          "job_id": "string - ID of the deleted job"
        },
        "errorResponses": {
          "403": "Forbidden - Job doesn't belong to current user",
          "404": "Not Found - Job with specified ID not found",
          "401": "Unauthorized - User not authenticated",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "DELETE /api/jobs/separation/sep_123456789",
          "response": {
            "success": true,
            "message": "Separation job deleted successfully",
            "job_id": "sep_123456789"
          }
        }
      },
      "deleteDubJob": {
        "path": "/api/jobs/dub/{job_id}",
        "method": "DELETE",
        "description": "Delete a specific video dubbing job permanently from user's account",
        "authentication": true,
        "request": {
          "job_id": "string (path parameter, required) - Unique job identifier to delete"
        },
        "response": {
          "success": true,
          "message": "Dub job deleted successfully",
          "job_id": "string - ID of the deleted job"
        },
        "errorResponses": {
          "403": "Forbidden - Job doesn't belong to current user",
          "404": "Not Found - Job with specified ID not found",
          "401": "Unauthorized - User not authenticated",
          "500": "Internal Server Error - Database or processing error"
        },
        "examples": {
          "request": "DELETE /api/jobs/dub/dub_123456789",
          "response": {
            "success": true,
            "message": "Dub job deleted successfully",
            "job_id": "dub_123456789"
          }
        }
      }
    }
  },
  "commonErrorResponses": {
    "400": {
      "description": "Bad Request - Invalid input data",
      "response": {
        "error": "string",
        "message": "string",
        "details": "string|object"
      }
    },
    "401": {
      "description": "Unauthorized - Authentication required or invalid token",
      "response": {
        "error": "Unauthorized",
        "message": "string"
      }
    },
    "403": {
      "description": "Forbidden - Access denied",
      "response": {
        "error": "Access denied",
        "message": "string"
      }
    },
    "404": {
      "description": "Not Found - Resource not found",
      "response": {
        "error": "Not found",
        "message": "string"
      }
    },
    "500": {
      "description": "Internal Server Error",
      "response": {
        "error": "Server error",
        "message": "string",
        "details": "string"
      }
    }
  },
  "dataTypes": {
    "User": {
      "id": "string",
      "name": "string",
      "email": "string (valid email)",
      "isEmailVerified": "boolean",
      "profilePicture": "string|null",
      "role": "user|admin",
      "credits": "number",
      "subscription": {
        "type": "free|premium|pro",
        "status": "active|trialing|past_due|canceled|none",
        "stripeCustomerId": "string|null",
        "stripeSubscriptionId": "string|null",
        "currentPeriodEnd": "string|null (ISO date)"
      }
    }
  },
  "creditSystem": {
    "description": "1 credit = 1 minute of processing time",
    "rates": {
      "audioSeparation": "1 credit per minute",
      "videoDubbing": "Credits based on video duration",
      "voiceCloning": "Usually free for small segments"
    },
    "checkBeforeProcessing": "All processing endpoints check for sufficient credits before starting",
    "autoDeduction": "Credits are automatically deducted upon successful job completion"
  },
  "fileSupport": {
    "videoUpload": {
      "supportedFormats": [".mp4", ".avi", ".mov", ".mkv", ".flv", ".wmv", ".webm", ".m4v"],
      "maxDuration": "4 hours (14400 seconds)",
      "uploadMethod": "Use /upload-file endpoint first, then use job_id in processing endpoints"
    },
    "audioProcessing": {
      "supportedFormats": [".mp3", ".wav", ".m4a", ".flac", ".aac", ".ogg"],
      "maxDuration": "2 hours for separation (7200 seconds), 4 hours for dubbing (14400 seconds)",
      "uploadMethod": "Use /upload-file endpoint first, then use job_id in processing endpoints"
    }
  },
  "workflowExamples": {
    "audioSeparation": {
      "steps": [
        "1. POST /upload-file with audio file to get job_id",
        "2. Poll GET /upload-status/{job_id} until upload is 'done'",
        "3. POST /api/audio-separation with job_id and duration",
        "4. Poll GET /api/audio-separation-status/{job_id} until status is 'completed'",
        "5. Download results from vocalUrl and instrumentUrl in response",
        "6. Credits are auto-deducted on completion"
      ]
    },
    "videoDubbing": {
      "steps": [
        "1. POST /upload-file with video file",
        "2. Poll GET /upload-status/{job_id} until status is 'done'",
        "3. POST /api/video-dub with job_id and dubbing parameters",
        "4. Poll GET /api/video-dub-status/{job_id} until status shows completion",
        "5. Download result from result_url",
        "6. Credits are auto-deducted on completion"
      ]
    },
    "userRegistrationAndPayment": {
      "steps": [
        "1. POST /api/auth/register to create account",
        "2. GET /api/auth/verify-email with token from email",
        "3. POST /api/auth/login to get auth token",
        "4. GET /api/stripe/plans to show pricing options",
        "5. POST /api/stripe/create-checkout-session to initiate payment",
        "6. Redirect user to Stripe checkout URL",
        "7. GET /api/stripe/verify-payment/{sessionId} to confirm and add credits"
      ]
    }
  },
  "notes": {
    "authentication": "Include 'Authorization: Bearer <token>' header for authenticated endpoints",
    "errorHandling": "All endpoints return consistent error response format",
    "backgroundProcessing": "Most processing endpoints return immediately and require status polling",
    "creditManagement": "Credits are checked before processing and deducted automatically on completion",
    "fileStorage": "Files are temporarily stored during processing and automatically cleaned up",
    "webhooks": "Stripe webhooks handle payment completion automatically",
    "pagination": "Job listing endpoints support pagination with page and limit parameters",
    "dubJobWorkflow": "Dub jobs progress through statuses: pending → downloading → separating → transcribing → processing → uploading → completed/failed",
    "separationJobWorkflow": "Separation jobs progress through statuses: pending → processing → completed/failed"
  }
}